name: 'Setup LXD'
description: 'Install and configure LXD on the runner'
inputs:
  channel:
    default: 'latest/candidate'
    description: 'Snap channel to install LXD from'
    required: false
    type: string
  group:
    default: 'adm'
    description: 'Name of the group that will have access to LXD'
    required: false
    type: string
  preseed:
    default: ''
    description: 'Preseed to use when initialising LXD'
    required: false
    type: string
  bridges:
    default: 'lxdbr0'
    description: 'Comma-separated list of LXD bridges to allow through the firewall'
    required: false
    type: string

runs:
  using: "composite"
  steps:

    - name: Install/refresh LXD snap
      shell: bash
      run: |
        set -x
        if snap list lxd; then
          sudo snap refresh lxd --channel=${{ inputs.channel }}
        else
          sudo snap install lxd --channel=${{ inputs.channel }}
        fi

    - name: Set up permissions for socket
      shell: bash
      run: |
        while [ -n "$(snap changes lxd 2>/dev/null | awk '/^[0-9]+/ {if ($2 != "Done") print $2 }')" ]; do
          echo "Waiting for snap changes on LXD to finish"
          sleep 1
        done
        sudo snap set lxd daemon.group=${{ inputs.group }}

    - name: Initialise LXD
      shell: bash
      env:
        # Use an environment variable to have correct quoting and escaping
        INPUT_PRESEED: ${{ inputs.preseed }}
      run: |
        sudo lxd waitready
        if [[ "${INPUT_PRESEED}" == "" ]]; then
          sudo lxd init --auto
          sudo lxc config set images.compression_algorithm none
        else
          sudo lxd init --preseed <<< "${INPUT_PRESEED}"
        fi

    - name: Configure firewall
      shell: bash
      run: |
        set -x
        IFS=',' read -ra bridges <<< "${{ inputs.bridges }}"
        for i in "${bridges[@]}"; do
          bridge=$(echo "$i" | xargs)  # Trim whitespace
          if sudo iptables -nL DOCKER-USER; then
            sudo iptables  -I DOCKER-USER -i "$bridge" -j ACCEPT
            sudo iptables  -I DOCKER-USER -o "$bridge" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          fi
          if sudo ip6tables -nL DOCKER-USER; then
            sudo ip6tables -I DOCKER-USER -i "$bridge" -j ACCEPT
            sudo ip6tables -I DOCKER-USER -o "$bridge" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          fi
        done
